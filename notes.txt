NPM Configs
===========

> npm set init-author-name
> npm set init-author-email
> npm set init-author-url
> npm set init-license

Check ~/.npmrc to get details about config!

Another property for saving dependency :
-----------------------------------------
save-exact - Tells NPM that whenever it is saving a dependency to your package.json, it would be the exact version instead of a version range.
             This protects you for when people don't use semver properly or if there's a mistake in the release. 
             This also makes upgrading dependencies have fewer surprises.

> npm set save-exact true


NOTE: 
    If you don't have save-exact, in package.json, next to every dependecy listed you'd have a ^ or ~ symbol!

To login to npm in command line:
------------------------------
> npm adduser
After this, an authToken will be generated for you and will be in npmrc!

NPM init
========

1. entry point :
            This is what will be used when you require the package/module as in require('starwars-names-learning_test
            We shall set it to src/index.js

2. test : 
            Leave it as blank for now because we'll add tests later            


To publish to NPM:
=================

>npm publish


To get info: 

> npm info <package_name>

This would give you info like you have in package.json 

Shortcut to package in npm:
===========================

Go to npm.im/<package_name> to go directly to the package page

Releaseing a version to Github:
===============================

One important aspect is to associate the version you have on npm with the version on the Github repository.
You accomplish this by adding a version tag to the Github repo.
A tag in Git is something that points to a particular commit so that you can easily go back to that commit

>git tag 1.0.0
>git push --tags

This will show up in the branches place inside a separate tab called Tags.

To delete a tag,
> git tag -d <tag_id>

Github will also consider this tag as a release and you will be able to see it in the releases tab in the tab menu above the branch dropdown
You could also draft a new release in that page - if the tag id is an existing tag, it just edits it (adds more info)


Releasing a new version to NPM
==============================

1. Make the change to src
2. Go to package.json and change the version number - but make sure you change it according to the rules of semantic versioning 
    First - major version - when you have a major release - a breaking change
    Second - minor release - new features - no breaking change
    Third - patch release - a bug fix 
3. 1) Add changes to stage
   2) Commit 
   3) Give it a tag using git tag <tag_id>
   4) git push
   5) git push --tags
   6) npm publish
   7) npm info <package_name> to verify

   Publishing a beta version
   =========================

   When you want to publish a version that you want people to test out but not want it to be the default version that people download.

   1. Make changes
   2. Go to package.json - if 1.1.0, change it to 1.2.0-beta.0 (you could change the final .0 to .1 .2 etc)
   3. Add changes
   4. Commit 
   5. Git tag 1.2.0-beta.0
   6. Push to Github
   7. Push tags to Github
   8. npm publish --tag beta

   If you do an npm info now, you will see that the latest version is still 1.1.0 but the beta version is 1.2.0-beta.0
   
   So, if some just does an npm install this package, they'll get 1.1.0 only.
   But if they do an npm install package@beta, they'll get 1.2.0-beta.0

   Whenever the beta version has been tested, you just remove beta from package.json and publish that to npm without the tag


Setting up Unit Testing using mocha and chai
=============================================

1. npm i -D mocha chai ( it is the same as npm i --save-dev mocha chai)
2. Create index.test.js in src
3. Write the test: 
 Eg:    describe('starwars-names', () => {
                it('should work', () => {
                    expect(true).to.be.true;
                })
            })
4. Go to package.json and update test to "mocha src/index.test.js -w" (-w so that it watches the file system for changes)


Automating release with semantic-release
=======================================

There are some recurring steps when you want to release a new version: 
1. Make the change
2. Commit
3. Tag that commit 
4. Push it to git
5. Publish

To automate this, a tool called semantic-release was created!

> npm i -g semantic-release-cli

Then,
> semantic-release-cli setup
This will take us through a process

The way it works is that it will actually release the software during CI.
If you don't have any CI set up semantic release will actually set it up for us.

We choose TravisCI

--------------------------- End here since course is outdated -----------------------------------

GITHOOKS 
========

You have different places where you can hook into git and execute some script before or after a certain action

So, here we would like to run our tests before we commit any code.
We are going to do this by using something called ghooks

Imp note: 
        Githooks are not committed to source, that is: If someone clones our repo, they will not have the hooks that we have

Ghooks actually makes it so when you npm install it will install the githooks and you can define the githooks in the package.json

Steps: 
1. Install ghooks
2.  Add this to package.json
"config": {
    "ghooks": {
      "pre-commit": "npm run test"
    }


CODE COVERAGE USING ISTANBUL
===========================

npm test: "istanbul cover -x *.test.js _mocha -- -R spec src/index.test.js"

The -- makes whatever that comes after it as an argument for the _mocha binary
The _mocha is in the bin folder inside node_modules and this is what istanbul needs us to run for mocha

There will also be a coverage file and we would not want to push this. So, add to .gitignore

ADDING CODE COVERAGE CHECKING 
============================

We want to make sure that coverage does not drop below a certain threshold especially when a new feature comes in

check-coverage: "istanbul check-coverage --statements 100 --branches 100 --functions 100 --lines 100"
This statement throws an error if the criteria are not met

Put it also as the pre-commit hook, so that you can never commit code that doesn't meet the standards.